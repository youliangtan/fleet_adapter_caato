# FLEET CONFIG =================================================================
# RMF Fleet parameters

rmf_fleet:
  name: "caato"
  limits:
    linear: [1.2, 1.5] # velocity, acceleration
    angular: [0.6, 0.6]
  profile: # Robot profile is modelled as a circle
    footprint: 0.5
    vicinity: 0.6
  reversible: False
  battery_system:
    voltage: 24.0
    capacity: 40.0
    charging_current: 26.4
  mechanical_system:
    mass: 80.0
    moment_of_inertia: 20.0
    friction_coefficient: 0.20
  ambient_system:
    power: 20.0
  cleaning_system:
    power: 760.0
  recharge_threshold: 0.05
  recharge_soc: 1.0
  publish_fleet_state: True
  account_for_battery_drain: True
  task_capabilities: # Specify the types of RMF Tasks that robots in this fleet are capable of performing
    loop: True
    delivery: False
    clean: False # deprecated, now replace as custom action
    finishing_request: "nothing"
    action_categories: ["clean", "manual_control"]

# Caato CONFIG =================================================================

robots:
  caato_1:
    caato_config:
      base_url: "http://127.0.0.1:3030"
      max_delay: 30.0 # allowed seconds of delay of the current itinerary before it gets interrupted and replanned
      filter_waypoints: True
      cleaning_task_prefix: "" # the prefix of the cleaning task created
      active_cleaning_config: "light_cleaning" # the cleaning config used during cleaning
      inactive_cleaning_config: "no_cleaning" # the cleaning config used during navigation
    rmf_config:
      robot_state_update_frequency: 0.5
      max_merge_lane_distance: 15.0 # means how far will the robot diverge from the defined graph
      charger:
        waypoint: "tinyRobot1_charger"

# TRANSFORM CONFIG =============================================================
# For computing transforms between Caato and RMF coordinate systems

# TRANSFORM CONFIG =============================================================
# For computing transforms between Caato and RMF coordinate systems
# Format robot_map: {rmf_map_name: rmf_map, transform: [tx,ty,r,s] }
# Format robot_map: {rmf_map_name: rmf_map, reference_coordinates: 
#                                 {rmf: [[x, y]....], rmf: [[x, y]....]}}
rmf_transform:
  TRL_L2:
    rmf_map_name: "TRL_L2"
    reference_coordinates:
      rmf: [[24.86, -24.85],
            [22.47, -26.83],
            [13.15, -16.87],
            [15.49, -14.93] ]
      robot: [ [15.20, -21.07],
                [12.66, -23.39],
                [3.07, -13.00],
                [5.44, -10.81] ]
    #transform: [1.33, 0.057, 0, 1.0] # This is obtained from traffic-editor
  ## User can also provide a pair of "reference_coordinates"
  # mock_test_robot_map2:
  #   rmf_map_name: "L1"
  #   reference_coordinates:
  #     rmf: [[33.11, -18.99],
  #           [111.3, -19.06],
  #           [86.16, -19.02],
  #           [24.68, -19.08] ]
  #     robot: [ [3876, 741],
  #               [2293, 703],
  #               [2816, 710],
  #               [4058, 747] ]

mock_clean_path: [
  [60.58, 186.84, 0],
  [81.59, 169.53, 0],
  [108.94, 162.66, 45],
  [137.94, 180.66, 90],
  [137.01, 226.99, 90],
  [132.72, 275.21, 90],
  [131.54, 318.55, 120],
  [127.56, 355.20, 180],
  [99.97, 358.42, -140],
  [66.74, 325.73, -90],
  [71.04, 289.43, -90],
  [73.83, 235.87, -90],
  [77.11, 200.20, -90],
  [60.58, 186.84, -90]
]
mock_dock_path: []
dock_position: [10.2, -8.27, 0.71] # charging point
mock_location: [0, 0, 0] # this indicate where the robot will start
mock_robot_map_name: "TRL_L2"
